Async/Await : is a pattern to write aschronous more than easily
Async : Allow program execute asynchronous operations
Await: block the below code to wait for asynchronous operation completed. But it will imediately return the Task  => NO BLOCK the Main Thread.
Wait:  block the below code to wait for asynchronous operation completed. No return anything => Block ALL Another Operations( include Main Thread)
** The way we put 'await' will create different asyn/await operations.
 Ex1:
    var r1 = RunTask1();
    await r1;
    var r2 =  RunTask2();
    await r2;
    => Wait for r1 completed -> run r2
 Ex2:
    var r1 = RunTask1();
    var r2 =  RunTask2();
    await r1;
    await r2;
    => r1 and r2 run asynchronously, but wait for the r1 completed firstly 

---------------------
Work with Task
- simple way to create asynchronous task- use Delay() method: 
   await Task.Delay(1000);

- wait many Task synchronously( block the current thread and until all Task completed)
  Use Task.WaitAll when you want to synchronously wait for multiple tasks to complete before proceeding. - WaitAll():
   Task.WaitAll(r1, r2);
   
   Ex:
   Task r1 = Task.Run(() => { /* Do something */ });
   Task r2 = Task.Run(() => { /* Do something */ });
   Task.WaitAll(r1, r2);  // This will block until both r1 and r2 are complete
   Console.WriteLine("All tasks completed");


- wait many Task asynchronously(no block the current thread instead of returning a new Task that represents the completion of all the input tasks.) 
  Use Task.WhenAll when you want to asynchronously wait for multiple tasks to complete without blocking the calling thread. - WhenAll():
   await Task.WhenAll(r1, r2);

   Ex:
      Task r1 = Task.Run(() => { /* Do something */ });
      Task r2 = Task.Run(() => { /* Do something */ });
      await Task.WhenAll(r1, r2);  // This will not block, allowing other operations to continue
      Console.WriteLine("All tasks completed");


